generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model appointments {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    v         Int      @map("__v")
    clinicId  String   @db.ObjectId
    cpf       String
    createdAt DateTime @db.Date
    day       DateTime @db.Date
    dentistId String   @db.ObjectId
    email     String
    interval  String
    name      String
    phone     String
    updatedAt DateTime @db.Date
}

model clinics {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    v         Int      @map("__v")
    createdAt DateTime @db.Date
    dentists  String[]
    name      String
    updatedAt DateTime @db.Date
}

model sessions {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    /// Field referred in an index, but found no data to define the type.
    expires Json?

    @@index([expires], map: "expires_1")
}

model users {
    id        String    @id @default(auto()) @map("_id") @db.ObjectId
    v         Int       @map("__v")
    createdAt DateTime? @db.Date
    email     String    @unique(map: "email_1")
    /// Field referred in an index, but found no data to define the type.
    githubId  Json?     @unique(map: "githubId_1")
    /// Field referred in an index, but found no data to define the type.
    googleId  Json?     @unique(map: "googleId_1")
    password  String
    updatedAt DateTime? @db.Date
    userType  String?
    username  String    @unique(map: "username_1")
}

model Payment {
    id            String        @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime      @default(now())
    pacientName   String
    procedure     String
    expertise     Expertise
    paymentMethod PaymentMethod
    value         Int
    cost          Int
    status        PaymentStatus
    observations  String
    userId        String        @db.ObjectId

    @@map("payments")
}

enum PaymentMethod {
    CASH        @map("dinheiro")
    CREDIT_CARD @map("Cartão de crédito")
    DEBIT_CARD  @map("Cartão de débito")
    PIX         @map("Pix")
}

enum PaymentStatus {
    PENDING   @map("Pendente")
    COMPLETED @map("Completo")
    CANCELED  @map("Cancelado")
}

enum Expertise {
    GENERAL     @map("Geral")
    SPECIALIZED @map("Especializado")
}
